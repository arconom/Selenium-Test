import SessionTest;
import TutorialTest;
import Utility;
import java.util.List;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

public abstract class JSPTestTemplate {
    
	//Do not set this to a new instance here in case the driver property is not set properly
    protected static WebDriver driver; 
    protected static SessionTest sessionTest = new SessionTest();
    protected static TutorialTest tutorialTest = new TutorialTest();    

    /***************************************************************************
     * This section is to catch the newer style errors generated by the system *                                                   
     **************************************************************************/
    @Test
    public void testFor404Error() throws Exception {
        boolean Has404ErrorCaseA = driver.getPageSource().contains("404 - Page Not Found");
        boolean Has404ErrorCaseB = driver.getPageSource().contains("404 - Not Found");
        assertEquals(false,Has404ErrorCaseA);
        assertEquals(false,Has404ErrorCaseB);
    }
    
    @Test
    public void testFor500Error() throws Exception {
        boolean Has500Error = driver.getPageSource().contains("500 - Internal Server Error");
        assertEquals(false,Has500Error);
    }
    
    
    @Test
    public void testForLoggingOutput() throws Exception {
        boolean HasExtraLogging = driver.getPageSource().contains("console\\.log");
        assertEquals(false,HasExtraLogging);
    }
    
    /***************************************************************************
     * This section is to catch the older style errors generated by the system *                                                   
     **************************************************************************/
    @Test
    public void testForGenericRedError() throws Exception {
        boolean HasRedTextError = driver.getPageSource().contains("An error has occurred...");
        assertEquals(false,HasRedTextError);
    }
    
    @Test
    public void testForIncorrectNonBreakingSpaces() throws Exception {
        boolean HasBadNBPS = driver.getPageSource().contains("&amp;nbsp;");
        assertEquals(false,HasBadNBPS);
    }
    
    /**
     * If null is displayed in a tag on the page this is probably wrong
     */
    @Test
    public void testForDisplayedNull() throws Exception {
        boolean HasNull = driver.getPageSource().contains(">null<");
        assertEquals(false,HasNull);
    }
    
    /**
     * If value=null is output it probably should be a set of empty quotes
     */
    @Test
    public void testForNullValues() throws Exception {
        boolean HasNull = driver.getPageSource().contains("value=null");
        assertEquals(false,HasNull);
    }
    
    /**
     * If null is displayed inside a link we probably have a problem somewhere
     */
    @Test
    public void testForNullLinkParameters() throws Exception {
        boolean HasNull = driver.getPageSource().contains("[?]*null");
        assertEquals(false,HasNull);
    }
    
    @Test
    public void testForInvalidURL() throws Exception {
        boolean HasInvalidURL = driver.getPageSource().contains("Invalid URL");
        //boolean HasInvalidURL = driver.getPageSource().contains("error.xhtml");
        assertEquals(false, HasInvalidURL);
    }
    
    /**
     * This test has been upgraded to look at the size of a body, if it is small
     *   then eat the whitespace and check for an empty body
     * @throws Exception 
     */
    @Test
    public void testForBlankBody() throws Exception {
        //boolean HasNoOutput = driver.getPageSource().equalsIgnoreCase("<html xmlns=\Utility.getProtocol()+"://www.w3.org/1999/xhtml\"><head></head><body></body></html>");
        String lowerCaseBody = driver.getPageSource().toLowerCase();
        int bodyStart = lowerCaseBody.indexOf("<body>");
        int bodyStop = lowerCaseBody.indexOf("</body>");

		assertEquals(false, (bodyStart == -1 || bodyStop == -1));

		int bodySize = bodyStop - bodyStart;

		if (bodySize < 100) {
				//The 7 is the length of "</body>"
                String CleanedBody = lowerCaseBody.substring(bodyStart, bodyStop+7).trim().replace(/\s/, ""); 
                boolean HasNoBody = CleanedBody.equalsIgnoreCase("<body></body>");
                assertEquals(false, HasNoBody);

				} 
    }
    
    @Test
    public void testForPerms() throws Exception{
        boolean HasAccessError = driver.getPageSource().contains("You do not have adequate permissions to access this page.");
        assertEquals(false,HasAccessError);
    }
    
    @Test
    public void testForLocationParserError() throws Exception{
        boolean HasLocationParseError = driver.getPageSource().contains("location.reload(\"");
        assertEquals(false,HasLocationParseError);
    }
    
    /***************************************************************************
     * This section is to catch issue with standards (Such as HTML5, and CSS)  *                                                   
     **************************************************************************/
    @Test
    public void testCodeStandardsForUpperCaseTags() throws Exception{
        boolean HasUpperCaseStartingTags = driver.getPageSource().contains("<[A-Z].>");
        boolean HasUpperCaseEndingTags = driver.getPageSource().contains("<\\/[A-Z].>");
        assertEquals(false,HasUpperCaseStartingTags);
        assertEquals(false,HasUpperCaseEndingTags);
    }
    
    /**
     * This tests exists to try and reduce the number of double encoding errors
     * @throws Exception 
     */
    @Test
    public void testForEncodedHTMLtag() throws Exception {
        boolean HasEncodedLessThan = driver.getPageSource().contains("&amp;lt;");
        boolean HasEncodedGreaterThan = driver.getPageSource().contains("&amp;gt;");
        if ( (HasEncodedLessThan) && (HasEncodedGreaterThan) ){
            assertEquals(false,true);
        }else{
            assertEquals(false,false);
        }
    }
    
}
